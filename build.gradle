apply plugin: 'eclipse'
apply plugin: 'idea'

buildscript {
    final String nexusPublicRepositoryUrl = 'http://192.241.179.41:9180/content/groups/public'

    repositories {
        maven { url nexusPublicRepositoryUrl }
    }
}

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    nexusPublicRepositoryUrl = 'http://192.241.179.41:9180/content/groups/public'
}
repositories {
    maven { url "$nexusPublicRepositoryUrl" }
}

ext {
	springVersion = '4.1.4.RELEASE'
	jacksonVersion = '2.5.0'
	log4jVersion = '2.1'
}

dependencies {
    
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-test:$springVersion"
    compile "org.springframework:spring-aop:$springVersion"
    
    compile 'javax.inject:javax.inject:1'
    
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    
    testCompile 'javax.servlet:javax.servlet-api:3.1.0'
    
    testCompile 'org.testng:testng:6.8.13'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.jayway.jsonpath:json-path:1.2.0'
}

test {

    // Enables TestNG support (default is JUnit)
    useTestNG {
        // Generates both HTML and XML reports.
        // TODO avoid a generation of HTML report
        useDefaultListeners = true
    }

    // Listens to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor.className}.${descriptor.name}")
    }

    // Listens to standard out and standard error of the test JVM(s)
    afterTest { descriptor, event ->
        logger.lifecycle("${event.resultType}: test ${descriptor.className}.${descriptor.name} executed")
    }
}

// We should try to work with a single wrapper from within the root dir, not have it in each and every sub-project
task wrapper(type: Wrapper) {

    // The distribution will be unpacked to the $USER_HOME/.gradle/gradle/dists
    archiveBase = Wrapper.PathBase.GRADLE_USER_HOME
    archivePath = 'gradle/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-2.2.1-all.zip'
}

